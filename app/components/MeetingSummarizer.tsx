'use client';

import React, { useMemo, useState } from 'react';
import { Check, ChevronLeft, ChevronRight, FileText, MessageSquare, Send, Sparkles, Wand2 } from 'lucide-react';
import FileUpload from './FileUpload';
import TextInput from './TextInput';
import PromptInput from './PromptInput';
import SummaryEditor from './SummaryEditor';
import EmailForm from './EmailForm';
import Toast, { ToastType } from './Toast';
import Modal from './Modal';
import { ProcessingState } from '../summarizerUtils';
import { formatEmailSubject } from '../summarizerUtils';
import { summarizeTranscript, sendEmail as sendEmailApi } from '../apiClient';
import FancyTitle from './FancyTitle';

interface ToastState {
  message: string;
  type: ToastType;
  show: boolean;
}

export default function MeetingSummarizer() {
  // data states
  const [transcript, setTranscript] = useState('');
  const [prompt, setPrompt] = useState('');
  const [summary, setSummary] = useState('');

  // flow states
  const [step, setStep] = useState<1 | 2 | 3>(1);
  const [processingState, setProcessingState] = useState<ProcessingState>(ProcessingState.IDLE);
  const [toast, setToast] = useState<ToastState>({ message: '', type: 'success', show: false });

  // modal state
  const [isSummaryModalOpen, setIsSummaryModalOpen] = useState(false);

  const isGenerating = processingState === ProcessingState.GENERATING;
  const isSending = processingState === ProcessingState.SENDING;

  const showToast = (message: string, type: ToastType) => setToast({ message, type, show: true });
  const hideToast = () => setToast(prev => ({ ...prev, show: false }));

  const handleFileSelect = (content: string, filename?: string) => {
    setTranscript(content);
    showToast(`File "${filename}" uploaded successfully!`, 'success');
  };

  // Step navigation guards
  const canContinueFromStep1 = useMemo(() => transcript.trim().length > 0, [transcript]);
  const canContinueFromStep2 = useMemo(() => summary.trim().length > 0 && !isGenerating, [summary, isGenerating]);

  const goNext = () => setStep(prev => (prev === 1 ? 2 : 3));
  const goBack = () => setStep(prev => (prev === 3 ? 2 : 1));

  // AI Summary
  const handleGenerateSummary = async () => {
    if (!transcript.trim()) {
      showToast('Please provide a transcript first', 'error');
      return;
    }
    setProcessingState(ProcessingState.GENERATING);
    try {
      const result = await summarizeTranscript(transcript, prompt);
      const text = result.summary || JSON.stringify(result);
      setSummary(text);
      showToast('Summary generated successfully!', 'success');
      setIsSummaryModalOpen(true);
      setProcessingState(ProcessingState.EDITING);
    } catch (error: any) {
      setProcessingState(ProcessingState.ERROR);
      showToast(error?.message || 'Failed to generate summary. Please try again.', 'error');
    }
  };

  const handleRegenerate = async () => {
    await handleGenerateSummary();
  };

  function markdownToHtml(markdown: string): string {
    let html = markdown;
    html = html.replace(/^### (.*$)/gim, '<h3>$1<\/h3>');
    html = html.replace(/^## (.*$)/gim, '<h2>$1<\/h2>');
    html = html.replace(/^# (.*$)/gim, '<h1>$1<\/h1>');
    html = html.replace(/\*\*(.*?)\*\*/gim, '<b>$1<\/b>');
    html = html.replace(/\n\n/gim, '<br/><br/>');
    html = html.replace(/^- (.*$)/gim, '<li>$1<\/li>');
    html = html.replace(/(<li>[\s\S]*?<\/li>)/gim, '<ul>$1<\/ul>');
    return `
      <div style="background:#f8fafc;padding:32px 0;">
        <div style="max-width:600px;margin:0 auto;background:#fff;border-radius:12px;box-shadow:0 2px 8px #e2e8f0;padding:32px;font-family:'Segoe UI',Arial,sans-serif;">
          <h1 style="color:#14b8a6;font-size:2rem;margin-bottom:16px;text-align:center;">AI Meeting Summary<\/h1>
          <div style="color:#334155;font-size:1rem;line-height:1.7;">
            ${html}
          <\/div>
          <hr style="margin:32px 0;border:none;border-top:1px solid #e2e8f0;" />
          <div style="text-align:center;color:#64748b;font-size:0.95rem;">Generated by Mangodesk<\/div>
        <\/div>
      <\/div>
    `;
  }

  const handleSendEmail = async (emails: string[], subject: string, body: string) => {
    if (!summary.trim()) {
      showToast('No summary to send', 'error');
      return;
    }
    setProcessingState(ProcessingState.SENDING);
    try {
      const htmlBody = markdownToHtml(body);
      await sendEmailApi(emails, subject, htmlBody);
      setProcessingState(ProcessingState.COMPLETE);
      showToast(`Summary sent to ${emails.length} recipient${emails.length > 1 ? 's' : ''}!`, 'success');
    } catch (error: any) {
      setProcessingState(ProcessingState.ERROR);
      showToast(error?.message || 'Failed to send email. Please try again.', 'error');
    }
  };

  // Stepper UI
  const steps = [
    { id: 1, title: 'Upload Transcript', subtitle: 'File or paste text', icon: FileText },
    { id: 2, title: 'Prompt & Summarize', subtitle: 'Guide the AI', icon: Wand2 },
    { id: 3, title: 'Share via Email', subtitle: 'Send the summary', icon: Send },
  ] as const;

  return (
    <div className="min-h-screen py-8" style={{
      backgroundImage: `repeating-linear-gradient(0deg, #e2e8f0 0px, #e2e8f0 1px, transparent 1px, transparent 20px), repeating-linear-gradient(90deg, #e2e8f0 0px, #e2e8f0 1px, transparent 1px, transparent 20px)`,
      backgroundColor: '#f8fafc',
    }}>
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-8">
          <FancyTitle />
          <p className="text-gray-600">A simple 3-step flow to generate and share polished meeting summaries</p>
        </div>

        {/* Stepper */}
        <ol className="mb-8 grid grid-cols-1 sm:grid-cols-3 gap-3">
          {steps.map((s, idx) => {
            const Icon = s.icon;
            const isActive = step === s.id;
            const isDone = step > s.id || (s.id === 2 && summary && !isGenerating);
            return (
              <li key={s.id} className={`flex items-center gap-3 rounded-xl border p-4 transition-colors ${isActive ? 'border-teal-500 bg-teal-50' : isDone ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-white'}`}>
                <div className={`flex h-9 w-9 items-center justify-center rounded-full border ${isDone ? 'border-green-500 bg-green-100 text-green-700' : isActive ? 'border-teal-500 bg-teal-100 text-teal-700' : 'border-gray-300 bg-gray-100 text-gray-600'}`}>
                  {isDone ? <Check size={18} /> : <Icon size={18} />}
                </div>
                <div>
                  <div className="text-sm font-semibold text-gray-900">{idx + 1}. {s.title}</div>
                  <div className="text-xs text-gray-500">{s.subtitle}</div>
                </div>
              </li>
            );
          })}
        </ol>

        {/* Panels */}
        <div className="space-y-6">
          {/* Step 1 */}
          {step === 1 && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">1. Upload or Paste Transcript</h2>
              <FileUpload onFileSelect={handleFileSelect} className="mb-4" />
              <div className="text-sm text-gray-500 text-center">or</div>
              <TextInput value={transcript} onChange={setTranscript} placeholder="Paste your meeting transcript here..." className="mt-4" />

              <div className="mt-6 flex items-center justify-between">
                <div className="text-xs text-gray-500">Accepted: .txt up to 200KB</div>
                <button onClick={goNext} disabled={!canContinueFromStep1} className={`inline-flex items-center gap-2 px-5 py-2.5 rounded-lg text-sm font-medium transition-all ${canContinueFromStep1 ? 'bg-teal-600 text-white hover:bg-teal-700 shadow-sm hover:shadow' : 'bg-gray-200 text-gray-500 cursor-not-allowed'}`}>
                  Next
                  <ChevronRight size={16} />
                </button>
              </div>
            </div>
          )}

          {/* Step 2 */}
          {step === 2 && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-start justify-between gap-4 mb-4">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">2. Add Prompt</h2>
                  <p className="text-sm text-gray-500">Guide the AI on tone, structure, and focus.</p>
                </div>
                <div className="flex items-center gap-2">
                  <button onClick={goBack} className="inline-flex items-center gap-1.5 px-3 py-2 rounded-lg border text-gray-700 hover:bg-gray-50">
                    <ChevronLeft size={16} /> Back
                  </button>
                </div>
              </div>

              <PromptInput value={prompt} onChange={setPrompt} />

              <div className="mt-5 flex flex-wrap items-center justify-between gap-3">
                <div className="flex items-center gap-2 text-xs text-gray-500">
                  <Sparkles size={14} className="text-teal-600" />
                  Tip: Try prompts like “Summarize action items with owners and due dates”.
                </div>
                <div className="flex items-center gap-2">
                  <button onClick={handleGenerateSummary} disabled={isGenerating || !transcript.trim()} className={`inline-flex items-center gap-2 px-5 py-2.5 rounded-lg text-sm font-medium transition-all ${(!isGenerating && transcript.trim()) ? 'bg-teal-600 text-white hover:bg-teal-700 shadow-sm hover:shadow' : 'bg-gray-200 text-gray-500 cursor-not-allowed'}`}>
                    <Wand2 size={16} /> {isGenerating ? 'Generating…' : 'Generate Summary'}
                  </button>
                  {summary && (
                    <button onClick={() => setIsSummaryModalOpen(true)} className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium border hover:bg-gray-50">
                      <MessageSquare size={16} /> Review Summary
                    </button>
                  )}
                  <button onClick={goNext} disabled={!canContinueFromStep2} className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium ${canContinueFromStep2 ? 'text-teal-700 bg-teal-50 hover:bg-teal-100 border border-teal-200' : 'text-gray-400 bg-gray-100 cursor-not-allowed border border-gray-200'}`}>
                    Continue to Email <ChevronRight size={16} />
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Step 3 */}
          {step === 3 && (
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex items-start justify-between gap-4 mb-4">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">3. Share via Email</h2>
                  <p className="text-sm text-gray-500">Your summary is ready to send. You can still edit it from the Review button.</p>
                </div>
                <div className="flex items-center gap-2">
                  <button onClick={() => setStep(2)} className="inline-flex items-center gap-1.5 px-3 py-2 rounded-lg border text-gray-700 hover:bg-gray-50">
                    <ChevronLeft size={16} /> Back to Prompt
                  </button>
                  <button onClick={() => setIsSummaryModalOpen(true)} className="inline-flex items-center gap-1.5 px-3 py-2 rounded-lg border text-gray-700 hover:bg-gray-50">
                    <MessageSquare size={16} /> Review Summary
                  </button>
                </div>
              </div>

              <div className="mb-4 text-sm text-gray-600">
                Subject suggestion is auto-filled; recipients will receive a nicely formatted HTML email.
              </div>

              <EmailForm onSend={handleSendEmail} isLoading={isSending} defaultSubject={formatEmailSubject(new Date())} body={summary} />
            </div>
          )}
        </div>
      </div>

      {/* Summary Modal */}
      <Modal isOpen={isSummaryModalOpen} onClose={() => setIsSummaryModalOpen(false)} title="Review & Edit Summary" size="xl" footer={(
        <>
          <button onClick={handleRegenerate} disabled={isGenerating || !transcript.trim()} className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium ${(!isGenerating && transcript.trim()) ? 'border border-teal-200 text-teal-700 bg-teal-50 hover:bg-teal-100' : 'border border-gray-200 text-gray-400 bg-gray-100 cursor-not-allowed'}`}>
            <Wand2 size={16} /> {isGenerating ? 'Regenerating…' : 'Regenerate'}
          </button>
          <button onClick={() => setIsSummaryModalOpen(false)} className="inline-flex items-center gap-2 px-5 py-2.5 rounded-lg text-sm font-medium bg-teal-600 text-white hover:bg-teal-700">
            Done
          </button>
        </>
      )}>
        <SummaryEditor value={summary} onChange={setSummary} isLoading={isGenerating} className="mt-1" />
      </Modal>

      {/* Toast */}
      {toast.show && (
        <Toast message={toast.message} type={toast.type} onClose={hideToast} />
      )}
    </div>
  );
}